@startuml
title Relationship Diagram of Hooks and Contexts

together {
	object "UserRegistView.tsx" as UserRegistView
	UserRegistView : yourName
	UserRegistView : oppeonentName
	UserRegistView : inputYourName
	UserRegistView : inputOpponentName
	UserRegistView : handelSubmit(event)
	
	object "TicTacToeView.tsx" as TicTacToeView 
	TicTacToeView : yourName
	TicTacToeView : opponentName
	TicTacToeView : gamePlayerNameOnTurn
	TicTacToeView : selectGameGrid()
	TicTacToeView : initGameStart()
	TicTacToeView : goBack()

}
together {
	object "GameGridsContext.tsx" as GameGridsContext
	GameGridsContext : gameGrids
	GameGridsContext : initGameGrids()
	GameGridsContext : getGameGrid(row, col)
	GameGridsContext : setGameGrid(row, col, gamePlayerKey, gameTurn)
	GameGridsContext : resetGameGrid(row, col)
	GameGridsContext : checkGameEndWithWin(gamePlayerKey)
	GameGridsContext : checkGameEndWithDraw()
		
	object "GamePlayersContext.tsx" as GamePlayersContext
	GamePlayersContext : gamePlayers
	GamePlayersContext : getGamePlayerName()
	GamePlayersContext : getYourName()
	GamePlayersContext : getOpponentName()
	GamePlayersContext : getGamePlayerKeyRandomly()
	GamePlayersContext : setGamePlayerNames(you, opponent)
	GamePlayersContext : initGamePlayerNames()

	object "GameStateContext.tsx" as GameStateContext 
	GameStateContext : gameMode
	GameStateContext : gameResult
	GameStateContext : initGameState()
	GameStateContext : setGameEndWithWin(gamePlayerKey)
	GameStateContext : setGameEndWithDraw()

	object "GameTurnContext.tsx" as GameTurnContext
	GameTurnContext : gameTurn
	GameTurnContext : gamePlayerKeyOnTurn
	GameTurnContext : initGameTurn()
	GameTurnContext : advanceGameTurn()
	GameTurnContext : rewindGameTurn()
}

together {

	object "useGameGrids.ts" as useGameGrids 
	useGameGrids : gameGrids
	useGameGrids : initGameGrids()
	useGameGrids : getGameGrid(row, col)
	useGameGrids : setGameGrid(row, col, gamePlayerKey, gameTurn)
	useGameGrids : resetGameGrid(row, col)
	useGameGrids : checkWin(gamePlayerKey)
	useGameGrids : checkDraw()

	object "useGamePlayers.ts" as useGamePlayers
	useGamePlayers : gamePlayers
	useGamePlayers : getGamePlayerName(gamePlayerKey)
	useGamePlayers : setGamePlayerNames(you, opponent)

	object "useGameMode.ts" as useGameMode
	useGameMode : gameMode
	useGameMode : initGameMode()
	useGameMode : setGameModeToGameOver()

	object "useGameResult.ts" as useGameResult
	useGameResult : gameResult
	useGameResult : initGameResult()
	useGameResult : setGameResult(gameResult)

	object "useGameTurn.ts" as useGameTurn
	useGameTurn : gameTurn
	useGameTurn : setFirstGameTurn()
	useGameTurn : increaseGameTurn()
	useGameTurn : decreaseGameTurn()
	
	object "useGamePlayerKeyOnTurn.ts" as useGamePlayerKeyOnTurn
	useGamePlayerKeyOnTurn : gamePlayerKeyOnTurn
	useGamePlayerKeyOnTurn : initGamePlayerKeyOnTurn()
	useGamePlayerKeyOnTurn : toggleGamePlayerKeyOnTurn()
}

UserRegistView <.. GamePlayersContext

TicTacToeView <.. GameGridsContext
TicTacToeView <.. GamePlayersContext
TicTacToeView <.. GameStateContext
TicTacToeView <.. GameTurnContext

GameGridsContext <.. useGameGrids

GamePlayersContext <.. useGamePlayers

GameStateContext <.. useGameMode
GameStateContext <.. useGameResult

GameTurnContext <.. useGamePlayerKeyOnTurn
GameTurnContext <.. useGameTurn


@enduml	   











